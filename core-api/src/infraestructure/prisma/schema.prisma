// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  output        = "./generated/prisma"
  binaryTargets = ["native", "darwin-arm64", "linux-musl-openssl-3.0.x", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String   @id @default(uuid())
  identificationNumber String   @unique
  name                 String
  lastName             String
  email                String   @unique
  dateOfBirth          DateTime
  passwordHash         String
  status               Boolean
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relations
  budgets            Budget[]
  transactions       Transaction[]
  userBanks          UserBank[]
  courseEnrollments  CourseEnrollment[]
  userModuleProgress UserModuleProgress[]
  chatSessions       ChatSession[]
  quizAttempts       QuizAttempt[]
  recommendations    Recommendation[]

  @@map("users")
}

model Budget {
  id            String    @id @default(uuid())
  userId        String
  name          String    @db.VarChar(25)
  description   String
  currentAmount Decimal   @db.Decimal(18, 4)
  goalAmount    Decimal   @db.Decimal(18, 4)
  currencyId    Int // Foreign key to Currency
  statusId      Int // Foreign key to BudgetStatus
  categoryId    Int // Foreign key to Category
  startDate     DateTime
  finishedDate  DateTime
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  // Relations
  user                User                 @relation(fields: [userId], references: [id])
  currency            Currency             @relation(fields: [currencyId], references: [id])
  status              BudgetStatus         @relation(fields: [statusId], references: [id])
  category            Category             @relation(fields: [categoryId], references: [id])
  budgetLineMovements BudgetLineMovement[]

  @@map("budgets")
}

model BudgetStatus {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(20) // active, inactive, completed
  description String?  @db.VarChar(100)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  budgets Budget[]

  @@map("budget_statuses")
}

model BudgetLineMovement {
  id            Int      @id @default(autoincrement())
  budgetId      String
  transactionId String
  movementType  String // Enum: allocation, actual
  amount        Decimal  @db.Decimal(18, 4)
  dateMovement  DateTime

  // Relations
  budget      Budget      @relation(fields: [budgetId], references: [id])
  transaction Transaction @relation(fields: [transactionId], references: [id])

  @@map("budget_line_movements")
}

model Transaction {
  id               String    @id @default(uuid())
  userId           String
  amount           Decimal   @db.Decimal(18, 4)
  currencyId       Int
  exchangeRateId   Int?
  type             String // Enum: expense, income
  categoryId       Int
  paymentMethodId  Int
  place            String    @db.VarChar(25)
  bankingProductId Int?
  transactionDate  DateTime
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  deletedAt        DateTime?

  // Relations
  user                User                 @relation(fields: [userId], references: [id])
  currency            Currency             @relation(fields: [currencyId], references: [id])
  exchangeRate        ExchangeRate?        @relation(fields: [exchangeRateId], references: [id])
  category            Category             @relation(fields: [categoryId], references: [id])
  paymentMethod       PaymentMethod        @relation(fields: [paymentMethodId], references: [id])
  bankingProduct      BankingProduct?      @relation(fields: [bankingProductId], references: [id])
  budgetLineMovements BudgetLineMovement[]

  @@map("transactions")
}

model PaymentMethod {
  id            Int      @id @default(autoincrement())
  paymentMethod String // Enum
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  transactions Transaction[]

  @@map("payment_methods")
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique @db.VarChar(25)
  kind      String // Enum: expense, income, budget
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  transactions Transaction[]
  Budget       Budget[]

  @@map("categories")
}

model Currency {
  id       Int    @id @default(autoincrement())
  currency String @db.VarChar(3)

  // Relations
  budgets       Budget[]
  transactions  Transaction[]
  exchangeRates ExchangeRate[]

  @@map("currencies")
}

model ExchangeRate {
  id         Int      @id @default(autoincrement())
  currencyId Int
  rate       Decimal  @db.Decimal(18, 8)
  rateDate   DateTime

  // Relations
  currency     Currency      @relation(fields: [currencyId], references: [id])
  transactions Transaction[]

  @@map("exchange_rates")
}

model Bank {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userBanks          UserBank[]
  bankBankingProduct BankBankingProduct[]

  @@map("banks")
}

model UserBank {
  id         String    @id @default(uuid()) // Keep UUID for privacy
  userId     String
  bankId     Int
  alias      String
  lastSyncAt DateTime?

  // Relations
  user User @relation(fields: [userId], references: [id])
  bank Bank @relation(fields: [bankId], references: [id])

  @@map("user_banks")
}

model BankingProduct {
  id                 Int    @id @default(autoincrement())
  bankingProductName String // Enum

  // Relations
  transactions       Transaction[]
  bankBankingProduct BankBankingProduct[]

  @@map("banking_products")
}

model BankBankingProduct {
  id               Int @id @default(autoincrement())
  bankId           Int
  bankingProductId Int

  // Relations
  bank           Bank           @relation(fields: [bankId], references: [id])
  bankingProduct BankingProduct @relation(fields: [bankingProductId], references: [id])

  @@map("bank_banking_products")
}

model CourseEnrollment {
  id           Int       @id @default(autoincrement())
  userId       String
  courseId     Int
  enrolledAt   DateTime
  unenrolledAt DateTime?

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])

  @@map("course_enrollments")
}

model Course {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  // Relations
  courseEnrollments CourseEnrollment[]
  modules           Module[]

  @@map("courses")
}

model UserModuleProgress {
  id              Int       @id @default(autoincrement())
  userId          String
  moduleId        Int
  status          String // Enum
  progressPercent Decimal   @db.Decimal(3, 2)
  startedAt       DateTime
  completedAt     DateTime?

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  module Module @relation(fields: [moduleId], references: [id])

  @@map("user_module_progress")
}

model Module {
  id                   Int      @id @default(autoincrement())
  courseId             Int
  contentItem          String
  sequence             Int
  summary              String
  estimatedMinutes     Int
  releaseAt            DateTime
  prerequisiteModuleId Int?

  // Relations
  course             Course               @relation(fields: [courseId], references: [id])
  userModuleProgress UserModuleProgress[]
  contentItems       ContentItem[]

  @@map("modules")
}

model ContentItem {
  id           Int    @id @default(autoincrement())
  sectionId    String
  moduleId     Int
  sequence     Int
  title        String
  fileUrl      String
  markdownBody String

  // Relations
  module Module @relation(fields: [moduleId], references: [id])

  @@map("content_items")
}

model QuizQuestion {
  id            Int    @id @default(autoincrement())
  contentItemId Int
  questionText  String
  questionType  String
  explanation   String

  // Relations
  quizOptions QuizOption[]

  @@map("quiz_questions")
}

model QuizOption {
  id             Int     @id @default(autoincrement())
  quizQuestionId Int
  optionText     String
  isCorrect      Boolean

  // Relations
  quizQuestion       QuizQuestion        @relation(fields: [quizQuestionId], references: [id])
  quizAttemptAnswers QuizAttemptAnswer[]

  @@map("quiz_options")
}

model QuizAttempt {
  id            Int       @id @default(autoincrement())
  userId        String
  contentItemId Int
  attemptNo     Int
  status        String // Enum
  startedAt     DateTime
  finishedAt    DateTime?
  score         Decimal

  // Relations
  user               User                @relation(fields: [userId], references: [id])
  quizAttemptAnswers QuizAttemptAnswer[]

  @@map("quiz_attempts")
}

model QuizAttemptAnswer {
  id             Int @id @default(autoincrement())
  quizAttemptId  Int
  quizQuestionId Int

  // Relations
  quizAttempt QuizAttempt @relation(fields: [quizAttemptId], references: [id])
  quizOption  QuizOption  @relation(fields: [quizQuestionId], references: [id])

  @@map("quiz_attempt_answers")
}

model ChatSession {
  id        String    @id @default(uuid()) // Keep UUID for privacy
  userId    String
  startedAt DateTime
  closedAt  DateTime?
  createdAt DateTime  @default(now())

  // Relations
  user         User           @relation(fields: [userId], references: [id])
  chatMessages ChatMessage[]
  chatFeedback ChatFeedback[]

  @@map("chat_sessions")
}

model ChatMessage {
  id         String   @id @default(uuid()) // Keep UUID for privacy
  sessionId  String
  role       String // Enum
  message    String
  tokenCount Int
  createdAt  DateTime @default(now())

  // Relations
  session ChatSession @relation(fields: [sessionId], references: [id])

  @@map("chat_messages")
}

model ChatFeedback {
  id        Int     @id @default(autoincrement())
  chatId    String
  sessionId String
  score     Int
  comment   String?

  // Relations
  session ChatSession @relation(fields: [sessionId], references: [id])

  @@map("chat_feedback")
}

model ChatEmbedding {
  id        Int    @id @default(autoincrement())
  messageId String
  vector    String // pgvector type in production

  @@map("chat_embeddings")
}

model Recommendation {
  id         Int       @id @default(autoincrement())
  sessionId  String
  type       String // Enum
  message    String
  accepted   Boolean
  acceptedAt DateTime?
  sentAt     DateTime

  // Relations
  user User @relation(fields: [sessionId], references: [id])

  @@map("recommendations")
}
